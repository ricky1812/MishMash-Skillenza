# -*- coding: utf-8 -*-
"""Calling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJzuiwNE6zlc-DzW-n7SH_MIHrAqowEk
"""

from keras.models import load_model
classifier=load_model("/home/rounak/traffic/traffic_model.h5")

import pickle
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random
import pandas as pd
import cv2
from keras.utils.np_utils import to_categorical

with open('german-traffic-signs/train.p','rb') as f:
  train_data = pickle.load(f)
with open('german-traffic-signs/train.p','rb') as f:
  test_data = pickle.load(f)
with open('german-traffic-signs/train.p','rb') as f:
  valid_data = pickle.load(f)

x_train , y_train = train_data['features'] ,train_data['labels']
x_test , y_test = train_data['features'] ,train_data['labels']
x_valid , y_valid = train_data['features'] ,train_data['labels']

assert(x_train.shape[0]==y_train.shape[0]),'train images not equal to train labels'
assert(x_test.shape[0]==y_test.shape[0]),'train images not equal to train labels'
assert(x_valid.shape[0]==y_valid.shape[0]),'train images not equal to train labels'

assert(x_train.shape[1:]==(32,32,3)),'image dimension must be 32 X 32 X 3'
assert(x_test.shape[1:]==(32,32,3)),'image dimension must be 32 X 32 X 3'
assert(x_valid.shape[1:]==(32,32,3)),'image dimension must be 32 X 32 X 3'

data = pd.read_csv('german-traffic-signs/signnames.csv')
data.head()
data.SignName[data.ClassId==0]

import cv2
import numpy as np

img_row,img_height,img_depth=32,32,1
color=True
scale=8
n_classes=43

def draw_test(name,res,input_im,scale,img_row,img_height):
    BLACK=[0,0,0]
    res=int(res)
    for i in range(n_classes):
        if res==i:
            pred=str(data.SignName[data.ClassId==i])
   
    expanded_img=cv2.copyMakeBorder(input_im,0,0,0,imageL.shape[0]*2,cv2.BORDER_CONSTANT,value=BLACK)
    if color==False:
        expanded_img=cv2.cvtColor(expanded_img,cv2.COLOR_GRAY2BGR)
    cv2.putText(expanded_img,str(pred),(300,80),cv2.FONT_HERSHEY_COMPLEX_SMALL,1,(0,255,0),2)
    cv2.imshow(name,expanded_img)
    
for i in range(0,10):
    rand=np.random.randint(0,len(x_test))
    input_im=x_test[rand]
    imageL=cv2.resize(input_im,None,fx=scale,fy=scale,interpolation=cv2.INTER_CUBIC)
    print(imageL.shape)
    print(input_im.shape)
    input_im=input_im[:,:,0].reshape(1,img_row,img_height,img_depth)
    
    res=str(classifier.predict_classes(input_im,1,verbose=0)[0])
    
    draw_test("Prediction",res,imageL,scale,img_row,img_height)
    cv2.waitKey(0)
cv2.destroyAllWindows()



classifier.input.shape

